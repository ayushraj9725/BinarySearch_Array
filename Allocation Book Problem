**************/
Problem Link : https://www.naukri.com/code360/problems/allocate-books_1090540   CodeNinja Code360   asked in Interview Company : Google , flipkart , TCS , IBM etc

Problem Statement : Given an array ‘arr’ of integer numbers, ‘arr[i]’ represents the number of pages in the ‘i-th’ book.



There are ‘m’ number of students, and the task is to allocate all the books to the students.



Allocate books in such a way that:

1. Each student gets at least one book.
2. Each book should be allocated to only one student.
3. Book allocation should be in a contiguous manner.


You have to allocate the book to ‘m’ students such that the maximum number of pages assigned to a student is minimum.
If the allocation of books is not possible, return -1.

Example:
Input: ‘n’ = 4 ‘m’ = 2 
‘arr’ = [12, 34, 67, 90]

Output: 113

Explanation: All possible ways to allocate the ‘4’ books to '2' students are:
12 | 34, 67, 90 - the sum of all the pages of books allocated to student 1 is ‘12’, and student two is ‘34+ 67+ 90 = 191’, so the maximum is ‘max(12, 191)= 191’.

12, 34 | 67, 90 - the sum of all the pages of books allocated to student 1 is ‘12+ 34 = 46’, and student two is ‘67+ 90 = 157’, so the maximum is ‘max(46, 157)= 157’.

12, 34, 67 | 90 - the sum of all the pages of books allocated to student 1 is ‘12+ 34 +67 = 113’, and student two is ‘90’, so the maximum is ‘max(113, 90)= 113’.

IN Future I will Explain also this Solution Dry run like step by step process how to think and find the solution and Pattern ! at time of revesion 

*************/
Brute Force Solution : Linear Search Used 

import java.util.ArrayList;
import java.util.Collections;
public class Solution {
    public static int countPages(ArrayList<Integer> arr, int n , int pages){
        int countBook = 1 , pageStudent = 0 ;
        for(int i = 0 ; i < n ;i++){
            if(pageStudent + arr.get(i) <= pages){
                pageStudent += arr.get(i) ; 
            }
            else{
                countBook++;
                pageStudent = arr.get(i);
            }
        }
        return countBook ;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
          // Brute Force Approach : Linear Search 
         int low = Collections.max(arr) , high = 0 ; // lowest minimum bound is the max of arr
         for(int i = 0 ; i < n ;i++){
             high += arr.get(i); // we get the sum here and it is last possible bound 
         }
         // apply linear Search
         for(int pages = low ; pages <= high ;pages++){
             int cp = countPages(arr,n,pages);
             if(cp == m){
                 return pages;
             }
         }
         return -1 ;
    }
}

Time COmplexity : O((sum - max) * N ) 


****************/
OPTIMAL SOLUTION : USING BINARY SEAERCH TECHNIQUE 
public class Solution {
    public static int countPages(ArrayList<Integer> arr, int n , int pages){
        int countBook = 1 , pageStudent = 0 ;
        for(int i = 0 ; i < n ;i++){
            if(pageStudent + arr.get(i) <= pages){
                pageStudent += arr.get(i) ; 
            }
            else{
                countBook++;
                pageStudent = arr.get(i);
            }
        }
        return countBook ;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
       // OPTIMAL SOLUTION : BINARY SEARCH
        if(n < m) return -1 ; // this is the impossible case for distribution of book to student
        int low = Collections.max(arr) , high = 0 ; // lowest minimum bound is the max of arr
         for(int i = 0 ; i < n ;i++){
             high += arr.get(i); // we get the sum here and it is last possible bound
         }
          int ans = 0 ;
         while(low <= high){
             int mid = low + (high - low) / 2;
             int cp = countPages(arr,n,mid); // mid is pages
             if(cp <= m){
                 ans = mid ;
                 high = mid - 1 ; // we are looking for min but that max so eliminate left half after knowing 

             } else low = mid + 1 ; // triming the right half that means answer not found yet 
         }
          return ans ; // we can return here right also due to opposite polarity of possiblity of yes or not at the end of the bianry search while loop
}

***************/

