/*******
PROBLEM LINK : Largest Subarray Sum Minimized , https://www.naukri.com/code360/problems/largest-subarray-sum-minimized_7461751?leftPanelTabValue=PROBLEM  ; CODENINJA 
PROBLEM STATEMENT : Given an integer array ‘A’ of size ‘N’ and an integer ‘K'.
Split the array ‘A’ into ‘K’ non-empty subarrays such that the largest sum of any subarray is minimized.
Your task is to return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

Example:
Input: ‘N’ = 5, ‘A’ = [1, 2, 3, 4, 5], ‘K’ = 3

Output: 6

Explanation: There are many ways to split the array ‘A’ into K consecutive subarrays.
The best way to do this is to split the array ‘A’ into [1, 2, 3], [4], and [5], where the largest sum among the three subarrays is only 6.

We solved it using Linear Search app and Binary Search Approach , using defind the range of possiblility , above problem explaination is only for the understanding purpose do not go for straigth using examole 
at revision time try to understand problem and find apply logic do dry run again and agaian to take varity of Cases . this is extremely hard question on binart search !

********/
BRUTE FORCE SOLUTION : LINEAR SEARCH APPROACH 
 public static int countPages(int[] arr, int n , int pages){
        int countBook = 1 , pageStudent = 0 ;
        for(int i = 0 ; i < n ;i++){
            if(pageStudent + arr[i] <= pages){
                pageStudent += arr[i] ; 
            }
            else{
                countBook++;
                pageStudent = arr[i];
            }
        }
        return countBook ;
    }

 int low = Collections.max(arr) , high = 0 ; // lowest minimum bound is the max of arr
         for(int i = 0 ; i < n ;i++){
             high += arr.get(i); // we get the sum here and it is last possible bound 
         }
         // apply linear Search
         for(int pages = low ; pages <= high ;pages++){
             int cp = countPages(arr,n,pages);
             if(cp == m){
                 return pages;
             }
         }
         return -1 ;

 public static int largestSubarraySumMinimized(int []a, int k) {
        int n = a.length ;
        int result = findPage(a,n,k);
        return  result ;
    }

TIME COMPLEXITY : O((sum - max)arr * N )
*********/
OPTIMAL SOLUTION FOR : BINARY SEARCH APPROACH 

public class Solution {
     public static int countPages(int[] arr, int n , int pages){
        int countBook = 1 , pageStudent = 0 ;
        for(int i = 0 ; i < n ;i++){
            if(pageStudent + arr[i] <= pages){
                pageStudent += arr[i] ; 
            }
            else{
                countBook++;
                pageStudent = arr[i];
            }
        }
        return countBook ;
    }
    public static int findPage(int[] arr, int n, int m) {
       // OPTIMAL SOLUTION : BINARY SEARCH
        if(n < m) return -1 ; // this is the impossible case for distribution of book to student
        int low = 0 , high = 0 ; // lowest minimum bound is the max of arr
         for(int i = 0 ; i < n ;i++){
             low = Math.max(low,arr[i]);
             high += arr[i]; // we get the sum here and it is last possible bound
         }
          int ans = 0 ;
         while(low <= high){
             int mid = low + (high - low) / 2;
             int cp = countPages(arr,n,mid); // mid is pages
             if(cp <= m){
                 ans = mid ;
                 high = mid - 1 ; // we are looking for min but that max so eliminate left half after knowing 

             } else low = mid + 1 ; // triming the right half that means answer not found yet 
         }
          return ans ; // we can return here right also due to opposite polarity of possiblity of yes or not at the end of the bianry search while loop
    }
    public static int largestSubarraySumMinimized(int []a, int k) {
        int n = a.length ;
        int result = findPage(a,n,k);
        return  result ;
    }
}

TIME COMPLEXITY : O(log2(sum - max)arr * N )
*********/
