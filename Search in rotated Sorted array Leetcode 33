/*
Problem statement
You have been given a sorted array/list 'arr' consisting of ‘n’ elements. You are also given an integer ‘k’.

Now the array is rotated at some pivot point unknown to you.

For example, if 'arr' = [ 1, 3, 5, 7, 8], then after rotating 'arr' at index 3, the array will be 'arr' = [7, 8, 1, 3, 5].

Now, your task is to find the index at which ‘k’ is present in 'arr'.

Note :
1. If ‘k’ is not present in 'arr', then print -1.
2. There are no duplicate elements present in 'arr'. 
3. 'arr' can be rotated only in the right direction.

Example:
Input: 'arr' = [12, 15, 18, 2, 4] , 'k' = 2

Output: 3
Explanation:
If 'arr' = [12, 15, 18, 2, 4] and 'k' = 2, then the position at which 'k' is present in the array is 3 (0-indexed).

problem link : https://www.naukri.com/code360/problems/search-in-rotated-sorted-array_1082554?leftPanelTabValue=PROBLEM
problem link : https://leetcode.com/problems/search-in-rotated-sorted-array/?envType=problem-list-v2&envId=array

asked in company : Google , amazone , facebook , adobe , phone pay ,paytm , tcs, oyo ,spinny etc
*/
import java.util.ArrayList;
public class Solution {
    public static int search(ArrayList<Integer> arr, int n, int k) {
     
     // Optimal Approach 
     int i = 0 , j = n - 1 ;
     int target = k ;
     while(i <= j){
         int mid = i + (j - i)/2 ;
         if(arr.get(mid) == target) return mid ; // find simple we return just
         // if not then we trying to find sorted side eitherleft or right
         if(arr.get(i) <= arr.get(mid)){ // left is sorted so we are eleminating left side 
             if(arr.get(i) <= target && target <= arr.get(mid)){
                 j = mid - 1 ; //  is right eleminating
             }
             else i = mid + 1 ; // left otherwise 
         }
         else{  // right is sorted 
             if(arr.get(mid) <= target && arr.get(j) >= target){
                 i = mid + 1 ; // left removing
             }
             else j = mid - 1 ; // right removing
         }
     }
     
     return -1 ;
     
     


     
     /*   // Brute Force Approach : using Linear Search 
        for(int i = 0 ; i < n ;i++){
            if(arr.get(i) == k) return i ;
        }
       return -1 ; // time complexity :  O(N) linear search ''

       */
    }
}
