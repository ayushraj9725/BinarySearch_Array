/*********
Problem statement :
You are given two positive integers 'n' and 'm'. You have to return the 'nth' root of 'm', i.e. 'm(1/n)'. If the 'nth root is not an integer, return -1.

Note:
'nth' root of an integer 'm' is a number, which, when raised to the power 'n', gives 'm' as a result.

Example:
Input: ‘n’ = 3, ‘m’ = 27    (1*1*1) not equal to 27 so check for -> (2*2*2) also not equal to 27 then again (3*3*3) -> 27 this is equal to 27 so return 3 as answer 
Output: 3

Explanation: 
3rd Root of 27 is 3, as (3)^3 equals 27.

problem llink : https://www.naukri.com/code360/problems/nth-root-of-m_1062679?leftPanelTabValue=PROBLEM
  leetcode : 
ask in Interview Company : Google ,amazone etc

**********/
/*********
Extreme Brute force approach :  to manualy check outter and inner fun 1 to m and 1 to n respectivly : O(M*N) time taken
Most Brute Force approach : use inner loop for calculating power each time Exponential power method 
code : 
public static long powerExp(int i , int n){
        long pw = 1 ;  // this power calculating can overflow in case of bigger value so we not use 
        while(n > 0){
            if(n % 2 == 1){ // if n is odd do multiply with i and decrement  n by one 
                pw = pw * i ;
                n = n - 1 ;
            }
            else{ // but if n is even do multiply with power, and made i in power
                i = i * i ;
                n = n/2 ; // and decrement n divide by 2 to optimize 
            }
        } // once n get at 0 go out of loop and return ans
        return pw ;
    }
public static int Nthroot(int n ,int m){
     for(int i = 1 ;i < m ; i++){
       if(powerExp(i,n) == m) return i ; // return just i if get equal to that m 
       else if(powerExp(i,n) > m) break ; // once after calculating one power and only one time just break and quit the loop , so in this scenario does not seems any over flow 
   }
    return -1 ; // if that above condition not work so return at the end -1 ;
}
// here time compelxity used : O(M * log2n) ;  
*********/

/*********
Optimizing above solution : observe here we are checking for unnecessary till the m in outter loop and sue to this time complexity will be O(M) ;
using Binary search we are try to optimized that ;
public static long powerExp(int i , int n){
        long pw = 1 ;  // this power calculating can overflow in case of bigger value so we not use 
        while(n > 0){
            if(n % 2 == 1){ // if n is odd do multiply with i and decrement  n by one 
                pw = pw * i ;
                n = n - 1 ;
            }
            else{ // but if n is even do multiply with power, and made i in power
                i = i * i ;
                n = n/2 ; // and decrement n divide by 2 to optimize 
            }
        } // once n get at 0 go out of loop and return ans
        return pw ;
    }
public static int Nthroot(int n , int m){
      int low  = 1 , high = m ;
      while(low <= high){
          int mid = (low + (high - low)/2) ;
           if(powerExp(mid,n) == m) return mid ; // return just mid if we get equal to m 
           else if(powerExp(mid,n) < m) low = mid + 1 ; // left trim check for maximum 
           else high = mid - 1 ; // else always right part triming 
    } 
    return -1 ;  // if not working 
}
// time Complexity : O(log2m * log2n) 

NOTE : HERE CHANCE TO OVERFLOW THE ANSWER WHILE WE ARE CALCULATING COMPLETELY POWER AND CHECK AGAIN AND AGAIN FOR THE POWER 
Let's SUPPOSE    m = 10 ^9  ;;  low = 1                mid = (10^9)/2                   high = 10^9 ;
ans suppose   n = 10  then  calculating mid*mid*mid into 10 time it goes to  10^90 , and we can not store it in any variable so we here it will fail 

WE ARE CORRECTING IT INT OTHER WAY manully calculate power one by one and when it goes greater 10^9 we return and complette the task
like mid*mid*mid > 10^9 we check again and again after each multipling by mid into mid if anyway it goes greater than m simple we quite the loop


**********/

/*********
MOST  OPTIMIZED SOLUTION :
// we check linearly and where we get ans > m one bye one doing quit not check for more calculation and update ans 
    public static int power(int i , int n ,int m){
        long ans = 1 ;
        for(int j = 1 ; j <= n ;j++){
            ans = ans * i ; // one by one calculating 
            if(ans > m) return 2 ;

        }
        if(ans == m) return 1 ;
        return 0 ;
    }
    public static int NthRoot(int n, int m) {
      // optimized Solution : using binary search ;
      int low = 1 , high = m ;
      while(low <= high){
          int mid = low + (high - low) / 2 ;
          if(power(mid,n,m) == 1) return mid ; //if get equal just return the mid 
          else if(power(mid,n,m) == 0) {
              low = mid + 1 ; // left eliminated checking for max
          }
          else high = mid - 1 ; // trim high not need to check for bigger 
      }
      // once it not done then return -1
      return -1 ;
      // time complexity : O(log2m * log2n) ; most optimal 



***********/
