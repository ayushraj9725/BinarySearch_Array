/*
Problem Statement :
You are given an array 'arr' having 'n' distinct integers sorted in ascending order. The array is right rotated 'r' times
Find the minimum value of 'r'.

Right rotating an array means shifting the element at 'ith' index to (‘i+1') mod 'n' index, for all 'i' from 0 to ‘n-1'.

Example:
Input: 'n' = 5 , ‘arr’ = [3, 4, 5, 1, 2]

Output: 3 

Explanation:
If we rotate the array [1 ,2, 3, 4, 5] right '3' times then we will get the 'arr'. Thus 'r' = 3.

problem link : https://www.naukri.com/code360/problems/rotation_7449070?leftPanelTabValue=PROBLEM

*/
public class Solution {
    public static int findKRotation(int []arr){
         int n = arr.length ;
         int i = 0 , j = n - 1 ;
         int mini = Integer.MAX_VALUE , ans_ind = -1 ;

      while(i <= j){
          int mid = (i + j) / 2 ;
          if(arr[i] < arr[j]){
             if(arr[i] < mini){
                 ans_ind = i ;
                 mini = arr[i] ;
             }
              break ;
          }
          if(arr[i] <= arr[mid]){
             if(arr[i] < mini){
                 ans_ind = i ;
                 mini = arr[i];
             }
              i = mid + 1 ; // removing left half
          }
          else{
              if(mini > arr[mid]){
                  ans_ind = mid ;
                  mini = arr[mid] ;
              }
               j = mid - 1 ;  // removing right half
          }
      }
      return ans_ind  ;


// other way of finding 

     /*   // to find this we have to know the index at which the arry containing minimest 
        // so how i can do this , using binary search and sorted property
        int n = arr.length ;
        int i = 0 , j = n - 1 ;
        if(arr[i] < arr[j]) return i ;  // here we check the array sorted 

        while(i < j){
            int mid = (i + j) / 2 ;
            if(arr[j] < arr[mid]){  // here always we check for unsorted elemnt
                i = mid + 1 ;  // eliminate left
            }
            else{
                j = mid ; // eliminate right not include mid
            }
        }
        return i ;
        //
      */
    }
}
