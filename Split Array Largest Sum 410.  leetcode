/*******
PROBLEM LINK : https://leetcode.com/problems/split-array-largest-sum/description/?envType=problem-list-v2&envId=array Leetcode , go and see the " largest subarray sum minimized " problem 

Problem statement  : 
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.


********/
code solution using binary search , you can check out that mention above problem 

class Solution {
    public static int splitingArr(int[] nums , int n , int split){
        int countArr = 1 , maxSum = 0 ;
        for(int i = 0 ; i < n ;i++){
            if(maxSum + nums[i] <= split){
                maxSum = maxSum + nums[i];
            }else{
                countArr++;
                maxSum = nums[i];
            }
        }
        return countArr ;
    }
    public int splitArray(int[] nums, int k) {
          int low = 0 , high = 0 ;
          for(int i = 0 ; i < nums.length ;i++){
             low = Math.max(low,nums[i]);
             high = high + nums[i];
          }   int ans = 0 ;
          // apply binary search here to find the spiled minimum sum of max
          while(low <= high){
            int mid = low + (high - low) / 2 ;
            int reqArr = splitingArr(nums,nums.length,mid); // mid is splitSum btw low and high
            if(reqArr <= k){
                ans = mid ;
                high = mid - 1 ; // right part triming bcz looking for mini of max 
            }else low = mid + 1 ; // other wise trim the left 
          }
          return ans  ;
    }
}

Time Complexity : O((LOG2(sum - max)arr * N)) ;
********/
