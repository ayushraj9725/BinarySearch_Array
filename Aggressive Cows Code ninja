*********/
Problem Link : https://www.naukri.com/code360/problems/aggressive-cows_1082559   Codeninja ;
Problem Statement : 
You are given an array 'arr' consisting of 'n' integers which denote the position of a stall.
You are also given an integer 'k' which denotes the number of aggressive cows.
You are given the task of assigning stalls to 'k' cows such that the minimum distance between any two of them is the maximum possible.

Print the maximum possible minimum distance.
Example:
Input: 'n' = 3, 'k' = 2 and 'arr' = {1, 2, 3}

Output: 2
Explanation: The maximum possible minimum distance will be 2 when 2 cows are placed at positions {1, 3}. Here distance between cows is 2.

Asked In Interview COmpany : Adobe , infosys , PhonePay ,etc

*********/
BRute FOrce APproach : Linear Search 
import java.util.Arrays;
public class Solution {
    public static boolean isPossible(int[] arr, int dist , int cow){
        int countCow = 1 , lastCow = arr[0];
        for(int i = 1 ; i < arr.length ;i++){
            if(arr[i] - lastCow >= dist){
                countCow++ ;
                lastCow = arr[i] ;
            }
        }
         if(countCow >= cow) return true ;
        return false ; //or we can return also countCow >= cow
    }
    public static int aggressiveCows(int []stalls, int k) {


            // BruteForce Approach : Linary Search 
            Arrays.sort(stalls);
            int minDis = 1 , maxDis = stalls[stalls.length - 1] - stalls[0] ; // bcs array sorted so 1st element is always min and last is max , 
                                      // we have to find max - min so we do that
            for(int i = minDis ; i <= maxDis ;i++){
                if(isPossible(stalls,i,k)) continue ;
                else return i - 1 ;
            }                          
        return maxDis ;

    }
}
**********/
OPTIMAL APPROACH : USING BINARY SEARCH APPROACH
 public static boolean isPossible(int[] arr, int dist , int cow){
        int countCow = 1 , lastCow = arr[0];
        for(int i = 1 ; i < arr.length ;i++){
            if(arr[i] - lastCow >= dist){
                countCow++ ;
                lastCow = arr[i] ;
            }
        }
         if(countCow >= cow) return true ;
        return false ; //or we can return also countCow >= cow
    }
    public static int aggressiveCows(int []stalls, int k) {
              int result = 0 ;
            Arrays.sort(stalls);
            int minDis = 1 , maxDis = stalls[stalls.length - 1] - stalls[0] ;
            while(minDis <= maxDis){
                int mid = minDis + (maxDis - minDis) / 2 ;
                if(isPossible(stalls,mid,k)){
                    result = mid ;
                    minDis = mid + 1 ; // left trimming bcz looking for max 
                }else maxDis = mid - 1 ; // otherwise trimming right part
            }
           return result ;

/**********
