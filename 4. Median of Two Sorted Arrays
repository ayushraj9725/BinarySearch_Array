Problem : 4. Median of Two Sorted Arrays
  links : https://leetcode.com/problems/median-of-two-sorted-arrays/description/     and   codstudio : https://www.naukri.com/code360/problems/median-of-two-sorted-arrays_985294

Problem Statement : Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)). can u solve 

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

*********/
code Brute Force : using temp ary/list and then check this will take extra space :
import java.util.List;
import java.util.ArrayList ;
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> tmp = new ArrayList<>();
        int n1 = nums1.length , n2 = nums2.length ;
        int i = 0 , j = 0 ;
        while(i < n1 && j < n2){
            if(nums1[i] < nums2[j]) tmp.add(nums1[i++]);
            else tmp.add(nums2[j++]) ;
        }
        while(i < n1) tmp.add(nums1[i++]);
        while(j < n2) tmp.add(nums2[j++]);

        // next step to check the size of tmp is even or odd
        int n = tmp.size();
        double median = 0 ;
        if(n % 2 == 1) median = tmp.get(n/2) ;
        else {
            median = (double)((tmp.get(n/2)) + (tmp.get((n/2) - 1))) / 2 ;
        }

        return median ;  // time complexity  : O(N1 + N2) and space is O(N1 + N2) same 
    }
}

/*********/
Better Approach : 
steps :
1. Identify Middle Elements:
Calculate the indices of the middle elements (mid1 and mid2) based on the total length of the combined arrays.
If the total length is odd, the median is simply the element at mid2.
If the total length is even, the median is the average of elements at mid1 and mid2.

2. Merging Process:
Use two pointers (i for a and j for b) to merge the arrays, keeping track of the current element count (count).
When the count reaches mid1 or mid2, store the corresponding values (num1 and num2).

3. Early Termination:
The merging stops as soon as the two middle elements are found, avoiding unnecessary work.

4.Final Calculation:
If the total length is odd, return the element at mid2.
If even, return the average of the elements at mid1 and mid2.
Time Complexity:
The time complexity is O(n1+n2), where 𝑛1 and 𝑛2 are the lengths of the input arrays, because the algorithm only processes each element once until the two middle elements are found.

This approach is efficient and avoids merging the entire array, making it suitable for large input arrays.

code :
public class Solution {
    public static double median(int[] a, int[] b) {
    	int i = 0 , j = 0 ;
        int n1 = a.length , n2 = b.length ;
        int n = (n1 + n2) ;
        int ind2 = n/2 ;
        int ind1 = (n-1)/2 ; // this is both actually what we need for that two elemt
        int cnt = 0 ;
        double median = 0 ;
        int indele1 = -1 , indele2 = -1 ; // this is that two element we are looking for 
        while(i < n1 && j < n2){
            if(a[i] < b[j]){
                if(cnt == ind1) indele1 = a[i];
                if(cnt == ind2) indele2 = a[i];
                cnt++;
                i++ ;
            }
            else{
                if(cnt == ind1) indele1 = b[j];
                if(cnt == ind2) indele2 = b[j];
                cnt++;
                j++ ;
            }
          if(cnt > ind2) break ; // this is breaking point where we get both number of arr what we required 
        }
        while(i < n1){
                if(cnt == ind1) indele1 = a[i];
                if(cnt == ind2) indele2 = a[i];
                cnt++;
                i++ ;
                 if(cnt > ind2) break ;
        }
        while(j < n2){
                if(cnt == ind1) indele1 = b[j];
                if(cnt == ind2) indele2 = b[j];
                cnt++;
                j++ ;
                 if(cnt > ind2) break ;
        }
        if(n % 2 == 1) median = indele2 ; //if size is odd then n/2 ind elemt is our answer 
        else{
            median = (double)((double)(indele1 + indele2)/2.0) ;
        }

        return median ; // time complexity : O(N1 + N2) in worth case , if we want to more optimized then we can do logic where we find both element then we will stop 
    }
}

/*********/

Optimal Solution : Binary Search Approach 



import java.util.*;

public class tUf {
    public static double median(int[] a, int[] b) {
        int n1 = a.length, n2 = b.length;
        //if n1 is bigger swap the arrays:
        if (n1 > n2) return median(b, a);

        int n = n1 + n2; //total length
        int left = (n1 + n2 + 1) / 2; //length of left half
        //apply binary search:
        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            //calculate l1, l2, r1 and r2;
            int l1 = (mid1 > 0) ? a[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? b[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? a[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? b[mid2] : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1) return Math.max(l1, l2);
                else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
            } else if (l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0; //dummy statement
    }

    public static void main(String[] args) {
        int[] a = {1, 4, 7, 10, 12};
        int[] b = {2, 3, 6, 15};
        System.out.println("The median of two sorted arrays is " + median(a, b));
    }
}



