problem name : Search in 2D arrahy 1 leetcode 74  .
problem link : https://leetcode.com/problems/search-a-2d-matrix/description/      , 
Problem statement  : 
You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

example : 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

constraints :
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104


/***********/
code : all overnow 
import java.util.Arrays;
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
         // Most Optimal Solution : using Optimization think hypotheticlly 2d arry in 1d arryand then apply Binary search  ;
// but problem we are facing to find the index actual thats 2D coordinate not 1D thinked index
     int n = matrix.length , m = matrix[0].length; // each row length is m
     int low = 0 , high = n * m - 1 ;
         while(low <= high){
            int mid = low + (high - low) / 2 ;
            int x = mid / m , y = mid % m ;
            if(matrix[x][y] == target ) return true ;
            else if(matrix[x][y] < target) low = mid + 1 ;
            else high = mid - 1 ;
         }
        return false ;
  // time complexity : O(log2(n*m)) ,used here only 



       /*  // Optimal Solution : Binary Search Approach 
         for(int i = 0 ; i < matrix.length ;i++){
            if(matrix[i][0] <= target && target <= matrix[i][matrix[i].length - 1]){
                 int ans = Arrays.binarySearch(matrix[i],target);
                 if(ans >= 0) return true ; // bcz bs method return +ve or -ve index so we need to store that somewhere and there after checking 
            }
         }
         return false ;
        */


      /*  // Brute force Approach : Linear Search 

        for(int i = 0 ; i < matrix.length ;i++){
            for(int j = 0 ; j < matrix[0].length ;j++){
                if(matrix[i][j] == target) return true ;
            }
        }
        return false ;
        // time complexity : O(N * M) row * colm
        */
    }
}
