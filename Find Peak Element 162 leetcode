/*****************
Problem statement : 162. Find Peak Element
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Problem link : https://leetcode.com/problems/find-peak-element/description/?envType=problem-list-v2&envId=array
             https://www.naukri.com/code360/problems/find-peak-element_1081482?leftPanelTabValue=SUBMISSION
asked in interview company : Google ,amazone ,adobe etc

*******************/
/*******************

Solution BruteForce : 
 int n = arr.size();
        for(int i = 0 ; i < n ;i++){
              if((i == 0 || arr.get(i-1) < arr.get(i))
              && (i == n-1 || arr.get(i) > arr.get(i+1))) return i ;
        }
        return -1 ;



Solution OPtimal 
 // Optimal Approach  : binary Search 


        int n = arr.size();
        if(n == 1) return 0 ;
        if(arr.get(0) > arr.get(1)) return 0 ;
        if(arr.get(n-2) < arr.get(n-1)) return n-1 ;
        int i = 1 , j = n - 2 ;
        while(i <= j){
            int mid = i + (j - i) / 2 ;
            if(arr.get(mid - 1) < arr.get(mid) && arr.get(mid) > arr.get(mid+1) ){
                return mid ;
            }
            // if not execute above then check for sorted or not so we can eliminate one part which is sorted in ascending
            if(arr.get(mid - 1) < arr.get(mid)) i = mid + 1 ; // eliminated left part 
            else j = mid - 1 ; // eliminated right part     
        }
        return -1 ;
        

2nd way of Solving 

class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length ;
        if(n == 1) return 0 ; // if array has only one element that is the peak
        if(nums[0] > nums[1]) return 0 ; // when array has peak at 1st index like [5,4,3,2,1]
        if(nums[n-2] < nums[n-1]) return n-1; // whn ary has peak at last ind like [1,2,3,4,5]
        // now check for binary search from excepting 1st and last index
        int low = 1 , high = n - 2 ;
        while(low <= high){
            int mid = low + (high - low) / 2 ;
            if(nums[mid - 1] < nums[mid] && nums[mid] > nums[mid+1]){
                return mid ;
            }
            // if not found then check for elimination , checking for srted part
            else if(nums[mid] > nums[mid-1]) low = mid + 1 ; // left eliminated 
            else  high = mid - 1 ; // right will go to elimination 
        }
        return -1 ;
    }
}


********************/
