problem name : Find Minimum in rotated sorted array part2       
problem link : https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/submissions/1466644988/            LEETCODE
 codeninjam  : 

problem statement : 
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:
[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.
You must decrease the overall operation steps as much as possible.

Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
Output: 0

Example 3:
Input: nums = [3,3,1,3,3,3,3] 
Output : 1 

*****************/
Code Optimal : using Binary Search Technique

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length ;
        int i = 0 , j = n - 1 ;
        int ans  = Integer.MAX_VALUE ;
        while(i <= j){
            int mid = (i + j) / 2 ;
            if(nums[i] == nums[mid] && nums[mid] == nums[j]){
                ans = Math.min(ans,nums[i]);
                i++; j--;
                continue ;  // if we get thislike [3,3,1,3,3,3,3] then this case help  
            }

            if(nums[i] <= nums[mid]){
                ans = Math.min(ans,nums[i]) ; // take minimest from left part sorted if
                i = mid + 1 ; // and then trim the left half 
            }
            else {
                ans = Math.min(ans,nums[mid]) ; // take minimest from right part 
                j = mid - 1 ; // otherwise trim the right half 
            }
           
        }
         return ans ;
    }
}
