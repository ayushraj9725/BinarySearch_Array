/**************
PROBLEM STATEMENT : KOKO EAT BANANA -> link : https://www.naukri.com/code360/problems/minimum-rate-to-eat-bananas_7449064?leftPanelTabValue=SUBMISSION    codeNinja   asked in company : Atlassion 
                                       link : https://leetcode.com/problems/koko-eating-bananas/?envType=problem-list-v2&envId=array   Leetcode  875
STATEMENT :
A monkey is given ‘n’ piles of bananas, where the 'ith' pile has ‘a[i]’ bananas. An integer ‘h’ is also given, which denotes the time (in hours) in which all the bananas should be eaten.
Each hour, the monkey chooses a non-empty pile of bananas and eats ‘m’ bananas. If the pile contains less than ‘m’ bananas, then the monkey consumes all the bananas and won’t eat any more bananas in that hour.
Find the minimum number of bananas ‘m’ to eat per hour so that the monkey can eat all the bananas within ‘h’ hours.

Example:

Input: ‘n’ = 4, ‘a’ =  [3, 6, 2, 8] , ‘h’ = 7
Output: 3

Explanation: If ‘m’ = 3, then 
The time taken to empty the 1st pile is 1 hour.
The time taken to empty the 2nd pile is 2 hour.
The time taken to empty the 3rd pile is 1 hour.
The time taken to empty the 4th pile is 3 hour.
Therefore a total of 7 hours is taken. It can be shown that if the rate of eating bananas is reduced, they can’t be eaten in 7 hours.


***************/
/*************
Extreme Brute force SOlution : Using Linear search we done this 
 public static int Maxi(int arr[] ){
        int n = arr.length ;
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ;i++){
            max = Math.max(max,arr[i]);
        }
        return max ;
    }
    public static int FindTotalHours(int v[] ,int hr){
            int n = v.length ; 
            int Totalhrs = 0 ; 
            // finding total hr ,as round value up to the nearest integer.
            for(int i = 0 ; i < n ;i++){
                Totalhrs += Math.ceil((double)(v[i]) / (double)(hr));
            }
            return Totalhrs ;
    }
   // forst we need to define the range for the last ,bcz 1 is 1st and what is last so max is last 

      public static int minimumRateToEatBananas(int []v, int h) {
         int j = Maxi(v); // this j is our last or high whatever ;
         
         // now we have to check for the minimum require time in per hr , so use ceil to do it 
         for(int i = 1 ; i <= j ;i++){ // here we are iterating v for eating banana 
             int reqTime = FindTotalHours(v,i) ;  // v has bananes and i will become our minimum per hrs eat banana by koko
             if(reqTime <= h){
                 return i ; // this is mini per hours eat banana total v has 
             }
         }
         return -1 ;
      }
         // Here time complexity : O(Max(v) * n) , here we are observing the pattern of linearly iterating and see two result ,
         // so we can optimized it using binary search the will mehtion above in this code  
      public static void main(String args[]){
           int arr[] = { 3, 7 , 11 , 2 }
           int hr = 8 ;
           int ans = minimumRateToEatBananas(arr,hr) ;
            System.out.println("Koko should eat at least " + ans + " bananas/hr.") ;
       }
// time complexity : O(MAx(v) * N ) ;

**************/

/***************
Optimal Approach  :Using Binary Search 

 public static int Maxi(int arr[] ){
        int n = arr.length ;
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ;i++){
            max = Math.max(max,arr[i]);
        }
        return max ;
    }
    public static int FindTotalHours(int v[] ,int hr){
            int n = v.length ; 
            int Totalhrs = 0 ; 
            // finding total hr ,as round value up to the nearest integer.
            for(int i = 0 ; i < n ;i++){
                Totalhrs += Math.ceil((double)(v[i]) / (double)(hr));
            }
            return Totalhrs ;
    }
    public static int minimumRateToEatBananas(int []v, int h) {
       
       // optimization : using binary search 
       int ans = 0 ;
       int i = 0 , j = Maxi(v) ; // i is low and j is high where i am appling the binary search
       while(i <= j){
           int mid = (i + (j - i) / 2);
           int reqTime = FindTotalHours(v,mid) ;
           if(reqTime <= h){
               ans = mid ;
               j = mid - 1 ;
         // if we found check for minimum so eliminate right half
           }
           else  i = mid + 1 ; // otherwise left half 
       }
       
        return ans ; // we can also return her low as an answer , bcz at the end of the binary search
        //  low which is initially not possible at at last till will hold the answer .
        // time complexity : O(log2(max(v)) * n) 
}
        public static void main(String args[]){
           int arr[] = { 3, 7 , 11 , 2 }
           int hr = 8 ;
           int ans = minimumRateToEatBananas(arr,hr) ;
            System.out.println("Koko should eat at least " + ans + " bananas/hr.") ;
       }




***************/
