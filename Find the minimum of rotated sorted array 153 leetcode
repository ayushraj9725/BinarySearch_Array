/*
Problem statement
You are given an array 'arr' of size 'n' having unique elements that has been sorted in ascending order and rotated between 1 and 'n' times which is unknown.
The rotation involves shifting every element to the right, with the last element moving to the first position. For example, if 'arr' = [1, 2, 3, 4] was rotated one time, it would become [4, 1, 2, 3].

Your task is to find the minimum number in this array.

Note :
All the elements in the array are distinct. 

Example :
Input: arr = [3,4,5,1,2]
Output: 1

Explanation: The original array was [1,2,3,4,5] and it was rotated 3 times.
Example 1 :
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times

problem link : https://www.naukri.com/code360/problems/rotated-array_1093219?leftPanelTabValue=SUBMISSION
              https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/1439003961/?envType=problem-list-v2&envId=array
asked in interview company : amazone , paytm ,ola ,adobe etc 


*/

public class Solution {
    public static int findMin(int []arr) {
        // finding the Minimum in rotated sorted array : using binary search 
        int n = arr.length ;
        int i = 0 , j = n - 1 , ans = Integer.MAX_VALUE ;
        while(i <= j){
            int mid = i + (j - i) / 2 ;
            // but if at that condition where array get already sorted 
            // then most left will alwaly my ans according to sorting property 
            // so we are minimizing here time , ther is no need to do for again binary search
            if(arr[i] <= arr[j]){
                ans = Math.min(ans,arr[i]);
                break ;
            }
            // identifing the rotated array so that we can take minimest from there and eliminitae them
            if(arr[i] <= arr[mid]){
                ans = Math.min(ans,arr[i]); // if the left arry is sorted ,then its left most is lowest 
                i = mid + 1 ; // here removed the left after taking minimest from that
            }
            else{ // if left part is not sorted then right part defenately sorted so here remove right after takin minimest from this part
                ans = Math.min(ans,arr[mid]); // if right part is sorted then mid is most left lowest
                j = mid - 1 ; // right part removed 

            }
        }
        // and after that at the end of the day , we will get ans minimest ele
        return ans ; // time complexity  : O(log2n)


    // brute force of this problem is to find minimest in array that will be done in O(N)
    }
}


// another way of doing this 

class Solution {
    public int findMin(int[] nums) {
        int i = 0 ;
        int j = nums.length - 1 ;
        // checking that case which already sorted 
        if(nums[i] < nums[j])  return nums[i] ;

        while(i < j){
            int mid = i + (j - i)/2 ;
            if(nums[mid] > nums[j]){
                i = mid + 1 ;
            }
            else j = mid ;
        }
        return nums[i] ;
        
      // time complexity is O(log n) this is Binary Search Approach  







// this is not correct above written that is correct .
        // while(nums[i] > nums[j]){
        //     count++ ;
        //     i++ ;
        //     j-- ;
        // }
        // result = nums[j+1] ;

        // return result ;
    }
}
